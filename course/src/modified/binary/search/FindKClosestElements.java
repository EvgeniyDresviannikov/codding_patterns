package modified.binary.search;

import java.util.*;
import java.util.stream.Collectors;


public class FindKClosestElements {

    public static void main(String[] args) {
        System.out.println(findClosestElements(new int[]{-9979,-9929,-9775,-9767,-9761,-9742,-9739,-9723,-9669,-9606,-9586,-9569,-9519,-9475,-9455,-9304,-9287,-9260,-9179,-9162,-9134,-9118,-9110,-9003,-8857,-8836,-8829,-8797,-8764,-8677,-8615,-8579,-8496,-8401,-8395,-8233,-8192,-8120,-8083,-8020,-8017,-8001,-7965,-7923,-7804,-7794,-7778,-7709,-7564,-7498,-7473,-7466,-7390,-7369,-7352,-7339,-7291,-7289,-7247,-7238,-7192,-7137,-7077,-7070,-7056,-7047,-7026,-6921,-6840,-6807,-6746,-6686,-6614,-6611,-6568,-6517,-6510,-6387,-6193,-6170,-6105,-6063,-6021,-5992,-5976,-5906,-5879,-5862,-5846,-5811,-5704,-5688,-5657,-5653,-5597,-5502,-5490,-5488,-5450,-5392,-5385,-5349,-5268,-5226,-5220,-5214,-5155,-5153,-5144,-5004,-4976,-4974,-4917,-4887,-4838,-4797,-4796,-4787,-4787,-4721,-4697,-4678,-4657,-4655,-4639,-4620,-4569,-4546,-4546,-4544,-4490,-4486,-4462,-4377,-4341,-4317,-4278,-4237,-4205,-4181,-4180,-4121,-4079,-4055,-4029,-3991,-3986,-3916,-3897,-3786,-3782,-3684,-3533,-3469,-3450,-3442,-3398,-3367,-3361,-3336,-3332,-3328,-3295,-3230,-3195,-3191,-3174,-3156,-2974,-2903,-2839,-2800,-2761,-2745,-2699,-2699,-2611,-2566,-2536,-2470,-2450,-2446,-2410,-2396,-2379,-2328,-2312,-2307,-2240,-2199,-2155,-2136,-2058,-1923,-1855,-1851,-1779,-1714,-1701,-1699,-1640,-1595,-1595,-1573,-1559,-1548,-1503,-1466,-1447,-1425,-1382,-1377,-1317,-1145,-997,-956,-930,-928,-912,-864,-854,-837,-826,-692,-649,-633,-623,-608,-596,-575,-547,-435,-360,-347,-338,-323,-290,-286,-219,-155,-64,-56,76,82,87,103,127,220,279,314,378,424,429,446,458,493,586,738,821,828,919,942,956,999,1021,1075,1113,1139,1142,1170,1322,1369,1375,1438,1471,1473,1558,1621,1632,1649,1650,1683,1718,1725,1764,1800,1828,1844,1856,1894,1910,1939,1973,2007,2138,2157,2272,2360,2368,2372,2464,2514,2520,2662,2769,2854,2897,2900,3099,3135,3152,3191,3202,3227,3273,3276,3281,3289,3301,3308,3369,3572,3577,3582,3608,3663,3681,3725,3744,3830,3856,3862,3882,3900,3945,4036,4050,4101,4155,4171,4173,4176,4219,4324,4361,4405,4412,4542,4567,4570,4581,4634,4727,4764,4843,4878,5013,5014,5064,5134,5140,5194,5204,5225,5265,5269,5329,5357,5362,5363,5498,5507,5542,5610,5648,5697,5826,5969,5969,6054,6060,6127,6138,6142,6372,6398,6444,6461,6491,6525,6555,6579,6605,6613,6625,6650,6689,6733,6801,6807,6840,6857,6857,6950,6975,7098,7152,7255,7278,7344,7346,7392,7506,7514,7562,7604,7627,7637,7645,7701,7731,7795,7864,7934,8011,8029,8091,8113,8113,8126,8143,8153,8204,8224,8246,8272,8356,8368,8424,8429,8439,8440,8462,8490,8494,8530,8531,8594,8627,8631,8646,8735,8746,8758,8814,8877,8913,8916,8919,9124,9136,9155,9202,9334,9346,9353,9397,9407,9434,9466,9531,9598,9633,9737,9773,9883}, 1, -3332));
    }

    public static List<Integer> findClosestElements(int[] nums, int k, int target) {

        if (k >= nums.length) return Arrays.stream(nums).boxed().collect(Collectors.toList());
        if (target <= nums[0]) return Arrays.stream(nums).limit(k).boxed().collect(Collectors.toList());
        if (target >= nums[nums.length-1]) return Arrays.stream(nums).skip(nums.length-k).boxed().collect(Collectors.toList());

        int left = 0;
        int right = nums.length-1;
        int mid = 0;
        int[] result = new int[k];
        int closest = -1;

        // find closest
        while (left <= right) {
            mid = left + (right - left)/2;

            if (nums[mid] == target) {
                closest = mid;
                break;
            }

            if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        closest = closest == -1 ? left : closest;
        result[0] = nums[closest];

        int counter = 1;
        left = closest - 1;
        right = closest + 1;
        while (counter < k) {
            if (left < 0) {
                result[counter] = nums[right];
                right++;
                counter++;
                continue;
            }

            if (right > nums.length-1) {
                result[counter] = nums[left];
                left--;
                counter++;
                continue;
            }


            if (getDistance(nums[left], target) <= getDistance(nums[right], target)) {
                result[counter] = nums[left];
                left -= 1;
            } else {
                result[counter] = nums[right];
                right += 1;
            }
            counter++;
        }

        return Arrays.stream(result).sorted().boxed().collect(Collectors.toList());
    }

    private static int getDistance(int number, int target) {
        return Math.abs(number - target);
    }
}
